name: Fluxo CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --all-features

  test-cli:
    name: Test CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build CLI
        run: cargo build --release

      - name: Run CLI tests
        run: cargo test --all-features

      - name: Test CLI binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./target/release/fluxo.exe --version
          else
            ./target/release/fluxo --version
          fi

  test-plugin:
    name: Test Studio Plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rojo
        uses: ok-nick/setup-aftman@v0.4.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rojo
        run: aftman install

      - name: Validate plugin project
        working-directory: studio-plugin
        run: |
          rojo build --output plugin.rbxm
          ls -la plugin.rbxm

      - name: Check plugin syntax (if selene config exists)
        working-directory: studio-plugin
        run: |
          if [ -f "selene.toml" ]; then
            # Install selene for Luau linting
            cargo install selene
            selene src/
          else
            echo "No selene.toml found, skipping Luau linting"
          fi

  integration-test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: [test-cli, test-plugin]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build CLI
        run: cargo build --release

      - name: Setup Node.js (for HTTP testing)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run integration tests
        shell: bash
        run: |
          # Make script executable on Unix systems
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x ./test-integration.sh
            ./test-integration.sh
          else
            ./test-integration.bat
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate, test-cli, test-plugin]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/fluxo.exe artifacts/
            cd artifacts
            7z a ../fluxo-${{ matrix.name }}.zip fluxo.exe
          else
            cp target/${{ matrix.target }}/release/fluxo artifacts/
            cd artifacts
            tar czvf ../fluxo-${{ matrix.name }}.tar.gz fluxo
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fluxo-${{ matrix.name }}
          path: fluxo-${{ matrix.name }}.*
          retention-days: 30

  publish-staging:
    name: Publish to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security-audit, build-artifacts]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure
        run: ls -la

      - name: Staging deployment placeholder
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This would deploy to your staging infrastructure"
          echo "Available artifacts:"
          find . -name "fluxo-*" -type f

  publish-production:
    name: Publish to Production
    runs-on: ubuntu-latest
    needs: publish-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Production deployment placeholder
        run: |
          echo "ðŸŽ‰ Ready for production deployment!"
          echo "This would deploy to your production infrastructure"
